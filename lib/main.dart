// lib/main.dart

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

import 'firebase_options.dart'; // generated by `flutterfire configure`

// Screens
import 'screens/main_screen.dart';
import 'screens/payment_screen.dart';
import 'screens/language_selection_screen.dart';
import 'screens/fluency_assessment_screen.dart';
import 'screens/lesson_plan_screen.dart';
import 'screens/flashcards_screen.dart';
import 'screens/vocab_drill_screen.dart';
import 'screens/calendar_screen.dart';
import 'screens/ai_practice_screen.dart';
import 'screens/language_focus_screen.dart';
import 'screens/home_screen.dart';
import 'screens/logout_screen.dart';
import 'screens/active_lessons_screen.dart';

// AUTH (moved)
import 'screens/auth/create_account_screen.dart';
import 'screens/auth/create_account_form_screen.dart';
import 'screens/auth/sign_in_screen.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Load .env (safe if missing)
  try {
    debugPrint("‚è≥ Loading .env‚Ä¶");
    await dotenv.load(fileName: ".env");
    debugPrint("‚úÖ .env loaded");
  } catch (e) {
    debugPrint("‚ö†Ô∏è .env not loaded (continuing): $e");
  }

  // Initialize Firebase
  debugPrint("‚è≥ Initializing Firebase‚Ä¶");
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  debugPrint("‚úÖ Firebase initialized");

  // Optional: debug anon sign-in controlled at runtime (no dead_code)
  // Set USE_ANON_BOOT=true in .env if you want this behavior during dev.
  final bool useAnonBoot =
      kDebugMode && (dotenv.env['USE_ANON_BOOT']?.toLowerCase() == 'true');

  if (useAnonBoot && FirebaseAuth.instance.currentUser == null) {
    final cred = await FirebaseAuth.instance.signInAnonymously();
    debugPrint("üë§ Signed in anonymously (debug): ${cred.user?.uid}");
  }

  // Debug-only Firestore healthcheck if signed in
  if (kDebugMode && FirebaseAuth.instance.currentUser != null) {
    final uid = FirebaseAuth.instance.currentUser!.uid;
    try {
      await FirebaseFirestore.instance.doc('users/$uid/meta/healthcheck').set({
        'ok': true,
        'ts': FieldValue.serverTimestamp(),
        'source': 'app_start',
      }, SetOptions(merge: true));
      debugPrint("‚úÖ Firestore healthcheck write succeeded");
    } catch (e) {
      debugPrint("‚ùå Firestore healthcheck failed: $e");
    }
  }

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Gab & Go',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        useMaterial3: true,
        brightness: Brightness.dark,
        colorSchemeSeed: Colors.blue,
      ),
      home: const MainScreen(),

      // Routes that take arguments
      onGenerateRoute: (settings) {
        switch (settings.name) {
          case '/fluencyAssessment':
            {
              final args = settings.arguments as Map<String, dynamic>? ?? {};
              return MaterialPageRoute(
                builder:
                    (ctx) => FluencyAssessmentScreen(
                      selectedLanguage: args['selectedLanguage'] ?? '',
                    ),
              );
            }
          case '/lessonPlan':
            {
              final args = settings.arguments as Map<String, dynamic>? ?? {};
              return MaterialPageRoute(
                builder:
                    (ctx) => LessonPlanScreen(
                      lessonPlan:
                          args['lessonPlan'] ?? 'No lesson plan provided.',
                    ),
              );
            }
          default:
            // Let MaterialApp handle unknown routes
            return null;
        }
      },

      // Simple routes (no args)
      routes: {
        // AUTH
        '/createAccount': (ctx) => const CreateAccountScreen(),
        '/createForm': (ctx) => const CreateAccountFormScreen(),
        '/signin': (ctx) => const SignInScreen(),
        '/login': (ctx) => const SignInScreen(), // alias for older calls
        // APP
        '/payment': (ctx) => const PaymentScreen(),
        '/languageSelect': (ctx) => const LanguageSelectionScreen(),
        '/flashcards': (ctx) => const FlashcardsScreen(),
        '/vocabDrill': (ctx) => const VocabDrillScreen(),
        '/calendar': (ctx) => const CalendarScreen(),
        '/fluency': (ctx) => const AIPracticeScreen(),
        '/languageTests': (ctx) => const LanguageFocusScreen(),
        '/home': (ctx) => const HomeScreen(),
        '/logout': (ctx) => const LogoutScreen(),
        '/activeLessons': (ctx) => const ActiveLessonsScreen(),
      },
    );
  }
}
